#+TITLE: Emacs configuration

* Before starting:

** Usage of =use-package=

#+BEGIN_EXAMPLE
(use-package package-name
	 [:keyword [option]]...)

:init          Code to run before PACKAGE-NAME has been loaded.
:config        Code to run after PACKAGE-NAME has been loaded.  Note that if
			   loading is deferred for any reason, this code does not execute
			   until the lazy load has occurred.
:preface       Code to be run before everything except `:disabled'; this can
			   be used to define functions for use in `:if', or that should be
			   seen by the byte-compiler.
:mode          Form to be added to `auto-mode-alist'.
:interpreter   Form to be added to `interpreter-mode-alist'.
:commands      Define autoloads for commands that will be defined by the
			   package.  This is useful if the package is being lazily loaded,
			   and you wish to conditionally call functions in your `:init'
			   block that are defined in the package.
:bind          Bind keys, and define autoloads for the bound commands.
:bind*         Bind keys, and define autoloads for the bound commands,
			   *overriding all minor mode bindings*.
:bind-keymap   Bind a key prefix to an auto-loaded keymap defined in the
			   package.  This is like `:bind', but for keymaps.
:bind-keymap*  Like `:bind-keymap', but overrides all minor mode bindings
:defer         Defer loading of a package -- this is implied when using
			   `:commands', `:bind', `:bind*', `:mode' or `:interpreter'.
			   This can be an integer, to force loading after N seconds of
			   idle time, if the package has not already been loaded.
:after         Defer loading of a package until after any of the named
			   features are loaded.
:demand        Prevent deferred loading in all cases.
:if EXPR       Initialize and load only if EXPR evaluates to a non-nil value.
:disabled      The package is ignored completely if this keyword is present.
:defines       Declare certain variables to silence the byte-compiler.
:functions     Declare certain functions to silence the byte-compiler.
:load-path     Add to the `load-path' before attempting to load the package.
:diminish      Support for diminish.el (if installed).
:ensure        Loads the package using package.el if necessary.
:pin           Pin the package to an archive.
#+END_EXAMPLE

* Repositories

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives 
             '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC
  
* GUI 

** The file name and the major mode as window name

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format '("%f [%m]"))
#+END_SRC

** Do not show splash screen, scroll bar nor tool bar
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+end_src

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Highlight current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful
when pairing or presenting code.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

** Set default font and size configuration

#+begin_src emacs-lisp
(setq hrs/default-font "Inconsolata")
(setq hrs/default-font-size 18)
(setq hrs/current-font-size hrs/default-font-size)

(setq hrs/font-change-increment 1.1)

(defun hrs/set-font-size ()
  "Set the font to `hrs/default-font' at `hrs/current-font-size'."
  (set-frame-font
   (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

(defun hrs/reset-font-size ()
  "Change font size back to `hrs/default-font-size'."
  (interactive)
  (setq hrs/current-font-size hrs/default-font-size)
  (hrs/set-font-size))

(defun hrs/increase-font-size ()
  "Increase current font size by a factor of `hrs/font-change-increment'."
  (interactive)
  (setq hrs/current-font-size
	(ceiling (* hrs/current-font-size hrs/font-change-increment)))
  (hrs/set-font-size))

(defun hrs/decrease-font-size ()
  "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq hrs/current-font-size
	(max 1
	     (floor (/ hrs/current-font-size hrs/font-change-increment))))
  (hrs/set-font-size))

(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
(define-key global-map (kbd "C--") 'hrs/decrease-font-size)

(hrs/reset-font-size)
#+end_src

** Custom theme

#+BEGIN_SRC emacs-lisp
;; (load-theme 'deeper-blue)

(load-theme 'zerodark t)
;; Optionally setup the modeline
(zerodark-setup-modeline-format)
#+END_SRC

** Powerline and =smart-mode-line=

#+BEGIN_SRC emacs-lisp
;; (powerline-center-theme) ;; -> Only this line was used
;; (setq powerline-arrow-shape 'curve)
;; (setq powerline-default-separator-dir '(right . left))

;; (setq sml/theme 'respectful)
;; (sml/setup)
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines
when programming.

#+BEGIN_SRC emacs-lisp
(require 'diff-hl)

(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Oscar Castillo-Felisola"
        user-mail-address "o.castillo.felisola@gmail.com"
        calendar-latitude -33.66
        calendar-longitude -71.51
        calendar-location-name "Valparaiso, CHILE")
#+END_SRC

* Functionalities

** Set =y/n=

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Save backups on a folder

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "/home/oscar/Software/git.src/mydotfiles/emacs.d/backups")))
#+END_SRC

** Selects the dictionary

#+begin_src emacs-lisp
(ispell-change-dictionary "british" t)
#+end_src

** Turns the orthographic correction (in Flyspell mode) on 

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

** Open shell

#+begin_src emacs-lisp
(define-key global-map (kbd "<f10>") 'shell)
#+end_src

** Obligates the Enter (or RET) key to indent if necessary

#+begin_src emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
(setq-default indent-tabs-mode t)
#+end_src

** Configuration of =smex=

#+begin_src emacs-lisp 
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

** Highlight text selection, bracket match, and expression within

#+begin_src emacs-lisp
(transient-mark-mode 1)
(show-paren-mode 1)
(setq show-paren-style 'expression)
#+end_src

** Wrap lines at the edges of windows

#+begin_src emacs-lisp
(setq-default truncate-lines nil)
;; Even for org-mode
;; (setq org-startup-truncated nil)
#+end_src

** Completion

#+begin_src emacs-lisp
(define-key global-map "\C-x\t" 'pcomplete)
#+end_src

** Settings of =company=

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** =company-quickhelp=
#+BEGIN_SRC emacs-lisp
(setq company-quickhelp-idle-delay 1)
#+END_SRC

*** =company-web= 
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'company-backends 'company-web-html)
  ;; (add-to-list 'company-backends 'company-web-jade)
  ;; (add-to-list 'company-backends 'company-web-slim)
#+END_SRC

*** =company-anaconda=
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)

#+END_SRC

** Open files vertically

From [[http://stackoverflow.com/a/6697992/1777293]]

#+BEGIN_SRC emacs-lisp
(defun 2-windows-vertical-to-horizontal ()
  (let ((buffers (mapcar 'window-buffer (window-list))))
    (when (= 2 (length buffers))
      (delete-other-windows)
      (set-window-buffer (split-window-horizontally) (cadr buffers)))))

(add-hook 'emacs-startup-hook '2-windows-vertical-to-horizontal)
#+END_SRC

** Setting a couple of registers

This registers serve as ~shortcuts~ to visit a couple of configuration
files. For /jumping/ to a registers one uses =C-x r j= and the
identifier of the register

#+BEGIN_SRC emacs-lisp
(set-register ?c '(file . "~/Software/git.src/mydotfiles/emacs.d/configuration.org"))
(set-register ?a '(file . "~/Documents/Dropbox/Org/agenda.org"))
#+END_SRC

** Autofill mode enabled

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

Sometimes, though, I don’t wanna wrap text. This toggles wrapping with =C-c q=:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

** Un-fill paragraph

Taken from *hrs* configuration

#+BEGIN_SRC emacs-lisp
(defun ocf/unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
#+END_SRC

And a function to toggle fill/un-fill paragraph
from [[http://ergoemacs.org/emacs/elisp_toggle_command.html][xah's page]]

#+BEGIN_SRC emacs-lisp
(defun ocf/toggle-fill-paragraph ()
  "Toggle fill paragraph Version 2016-09-20"
  (interactive)
  ;; use a property “state”. Value is t or nil
  (if (get 'ocf/toggle-fill-paragraph 'state)
      (progn (ocf/unfill-paragraph)
             (put 'ocf/toggle-fill-paragraph 'state nil))
    (progn
      (fill-paragraph)
      (put 'ocf/toggle-fill-paragraph 'state t))))
#+END_SRC

assigning a keybinding

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-q") 'ocf/toggle-fill-paragraph)
#+END_SRC

** Subword mode enabled

#+BEGIN_SRC emacs-lisp
(subword-mode 1)
#+END_SRC

** Yasnippets

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "C-<tab>") 'yas-expand)
#+END_SRC

** Extra features of =dired=

I've installed =dired+= and =dired-k=

#+BEGIN_SRC emacs-lisp
(require 'dired+)

(require 'dired-k)
(define-key dired-mode-map (kbd "K") 'dired-k)

;; You can use dired-k alternative to revert-buffer
(define-key dired-mode-map (kbd "g") 'dired-k)

;; always execute dired-k when dired buffer is opened
(add-hook 'dired-initial-position-hook 'dired-k)

(add-hook 'dired-after-readin-hook #'dired-k-no-revert)
#+END_SRC

** Improving =emacs= file name completion

From the webpage [[http://endlessparentheses.com/improving-emacs-file-name-completion.html][endlessparentheses]]
#+BEGIN_SRC emacs-lisp
(mapc (lambda (x)
        (add-to-list 'completion-ignored-extensions x))
      '(".aux" ".bbl" ".blg" ".exe"
        ".log" ".meta" ".out" ".pyg"
        ".synctex.gz" ".tdo" ".toc"
        "-pkg.el" "_latexmk" ".fls"))
#+END_SRC

** Personal commands

I defined the commands for adding inline equations and displaymode
withing =org= and =LaTeX= modes.

- Change to the =*scratch*= buffer
- Use =F3= to start defining a macro
- define your macro
- Use =F4= to the definition
- Use the command =M-x insert-kbd-macro RET RET= to insert the command
  in your buffer.
- Now you can give a name to it and add it to your =.emacs=

*** Inline equation

#+BEGIN_SRC emacs-lisp
(fset 'ocf/inline-eq
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([92 40 92 41 67108914 2] 0 "%d")) arg)))

(global-set-key (kbd "C-¿") 'ocf/inline-eq)
#+END_SRC

*** Display Math Mode

#+BEGIN_SRC emacs-lisp
(fset 'ocf/displaymode
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([92 91 return return 92 93 16] 0 "%d")) arg)))

(global-set-key (kbd "C-¡") 'ocf/displaymode)
#+END_SRC

** =GNUS=

#+BEGIN_SRC emacs-lisp
(setq send-mail-function 'smtpmail-send-it)
#+END_SRC

** =transpose-frame=

#+BEGIN_SRC emacs-lisp
(require 'transpose-frame)
#+END_SRC

** Games

*** =typing=                                                  :NOTWORKING:

#+BEGIN_SRC emacs-lisp
(autoload 'typing-of-emacs "The Typing Of Emacs, a game." t)
#+END_SRC

* Programming Languages 

** Python

*** Indent 2 spaces.

#+BEGIN_SRC emacs-lisp
(setq python-indent 2)
#+END_SRC

*** =elpy= configuration and more 

This configuration comes from a [[https://realpython.com/blog/python/emacs-the-best-python-editor/][realpython article]]

#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (setq python-shell-interpreter "jupyter"
	python-shell-interpreter-args "console --simple-prompt")

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC


** LaTeX

*** New environments

#+BEGIN_SRC emacs-lisp
(setq latex-block-names '("theorem" "corollary" "proof"
                          "frame" "block" "alertblock"
                          "definition" "example" "align"
                          "align*" "columns" "tikzpicture"
                          "axis" "cases" "matrix" "pmatrix"
                          "vmatrix" "parts" "questions"
                          "solution" "Ebox" "WEbox" "widetext"
                          "dmath" "dmath*" "split" "cdbexample"
			  "cdbexample*"))
#+END_SRC

** Magit and magithub

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Magithub can be installed from =MELPA= repository, and needs to be
called after =magit=

#+BEGIN_SRC emacs-lisp
;; (require 'magithub)
#+END_SRC

It's integrated into =magit= workflow, and it is called with ~H~

* Org-mode configuration

** Settings

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/home/oscar/mydotfiles/emacs.d/org-mode/lisp/")
;; (add-to-list 'load-path "/home/oscar/mydotfiles/emacs.d/org-mode/contrib/lisp/" )
#+END_SRC

*** The /alist/ for =org= and =txt= files

 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
 (add-to-list 'auto-mode-alist '("\\.tex$" . latex-mode))
 #+END_SRC

*** Key bindings

 #+BEGIN_SRC emacs-lisp
 (global-set-key "\C-cl" 'org-store-link) 
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cb" 'org-iswitchb)
 (global-set-key "\C-cc" 'org-capture)
 #+END_SRC

*** Activate speed commands

Look at this [[https://emacs.stackexchange.com/a/33330/2441][post]]

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

**** Custom org speed commands

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

(add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
(add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))


#+END_SRC

*** Indentation

 #+BEGIN_SRC emacs-lisp
 (setq org-indirect-buffer-display 'current-window)
 (setq org-startup-indented t)
 (setq org-src-preserve-indentation nil)
 (setq org-edit-src-content-indentation 0)
 ;; (setq org-src-tab-acts-natively t)
 #+END_SRC

*** Activate =latex-mode= yasnippets 

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

within =org-mode= [[https://emacs.stackexchange.com/a/38431/2441][emacs.stackexchange post]]

#+BEGIN_SRC emacs-lisp
(defun my-org-latex-yas ()
  "Activate org and LaTeX yas expansion in org-mode buffers."
  ;; (yas-minor-mode)
  (yas-activate-extra-mode 'latex-mode))

(add-hook 'org-mode-hook #'my-org-latex-yas)
#+END_SRC

** New =org-structure-templates=

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	     '("C" "#+BEGIN_COMMENT\n?\n#+END_COMMENT" ""))

					; add <p for python expansion
(add-to-list 'org-structure-template-alist
	     '("p" "#+BEGIN_SRC python :results output org drawer\n?\n#+END_SRC"
	       "<src lang=\"python\">\n?\n</src>"))

;; add <por for python expansion with raw output
(add-to-list 'org-structure-template-alist
	     '("por" "#+BEGIN_SRC python :results output raw\n?\n#+END_SRC"
	       "<src lang=\"python\">\n?\n</src>"))

;; add <pv for python expansion with value
(add-to-list 'org-structure-template-alist
	     '("pv" "#+BEGIN_SRC python :results value\n?\n#+END_SRC"
	       "<src lang=\"python\">\n?\n</src>"))

;; add <el for emacs-lisp expansion
(add-to-list 'org-structure-template-alist
	     '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"
	       "<src lang=\"emacs-lisp\">\n?\n</src>"))

(add-to-list 'org-structure-template-alist
	     '("ell" "#+BEGIN_SRC emacs-lisp :lexical t\n?\n#+END_SRC"
	       "<src lang=\"emacs-lisp\">\n?\n</src>"))

;; add <sh for shell
(add-to-list 'org-structure-template-alist
	     '("sh" "#+BEGIN_SRC shell\n?\n#+END_SRC"
	       "<src lang=\"shell\">\n?\n</src>"))

;; LaTeX structures
(add-to-list 'org-structure-template-alist
	     '("le" "\\begin{equation}\n?\n\\end{equation}" ""))

(add-to-list 'org-structure-template-alist
	     '("la" "\\begin{align}\n?\n\\end{align}" ""))

(add-to-list 'org-structure-template-alist
	     '("j" "\\begin\{split\}\n?\n\\end\{split\}" ""))

(add-to-list 'org-structure-template-alist
	     '("lh" "#+latex_header: " ""))

(add-to-list 'org-structure-template-alist
	     '("lc" "#+latex_class: " ""))

(add-to-list 'org-structure-template-alist
	     '("lco" "#+latex_class_options: " ""))

(add-to-list 'org-structure-template-alist
	     '("ao" "#+attr_org: " ""))

(add-to-list 'org-structure-template-alist
	     '("al" "#+attr_latex: " ""))

(add-to-list 'org-structure-template-alist
	     '("ca" "#+caption: " ""))

(add-to-list 'org-structure-template-alist
	     '("tn" "#+tblname: " ""))

(add-to-list 'org-structure-template-alist
	     '("n" "#+name: " ""))

(add-to-list 'org-structure-template-alist
	     '("o" "#+options: " ""))

(add-to-list 'org-structure-template-alist
	     '("ti" "#+title: " ""))

;; ;; table expansions
;; (loop for i from 1 to 6
;;       do
;;       (let ((template (make-string i ?t))
;; 	    (expansion (concat "|"
;; 			       (mapconcat
;; 				'identity
;; 				(loop for j to i collect "   ")
;; 				"|"))))
;; 	(setf (substring expansion 2 3) "?")
;; 	(add-to-list 'org-structure-template-alist
;; 		     '(,template ,expansion ""))))

#+END_SRC

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode 1)))

  (setq org-hide-leading-stars t)
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** Babel: languages and configuration

Active Babel languages:

#+BEGIN_SRC emacs-lisp
(require 'ob-ipython)
(org-babel-do-load-languages 'org-babel-load-languages 
			     '((C . t)
			       (ditaa . t)
			       (emacs-lisp . t) 
			       (fortran . t)
			       (gnuplot . t)
			       (ipython . t)
			       (latex . t)
			       (ledger . t)
			       (mathematica . t)
			       (maxima . t)
			       (octave . t)
			       (org . t)
			       (python . t)
			       (R . t) 
			       (shell . t)
			       ))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

One can change the background colours of the programming blocks. In
order to see the available colours, run the command 
=M-x list-colors-display=

#+BEGIN_SRC emacs-lisp
(setq org-src-block-faces '(("emacs-lisp" (:background "DarkSlateGrey"))
			    ("python" (:background "DarkOrange4"))
			    ("ipython" (:background "AntiqueWhite4"))
			    ("latex" (:background "MidnightBlue"))
			    ("shell" (:background "DarkGreen"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-derived-mode cadabra-mode python-mode "cadabra"
  ; make #a symbol constituent
  (modify-syntax-entry ?# "_" cadabra-mode-syntax-table))
#+END_SRC

** Task management (agenda)

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'note)
#+END_SRC

Store my org files in =~/Documents/Dropbox/Org=, 
+maintain an inbox in Dropbox+, 
+define the location of an index file+ (+my main todo list+)
Screencast [[http://2484.de/org-index.html]], 
and archive finished tasks in =~/Documents/Dropdox/Org/archive.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "/home/oscar/Documents/Dropbox/Org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  ;; (setq org-inbox-file "/home/oscar/Documents/Dropbox/inbox.org")
  ;; (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

*** Define a default task to clock in

This has been made following the [[http://doc.norang.ca/org-mode.html][norang's configuration]] page.

#+BEGIN_SRC emacs-lisp
(defvar ocf/organization-task-id "c047fc98-58f3-4291-87e3-99465facb9aa")
#+END_SRC

This number identify the =Task/Organization= in my =agenda.org= file

Now we define a function to clock-in in the default task

#+BEGIN_SRC emacs-lisp
(defun ocf/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find ocf/organization-task-id 'marker)
                     (org-clock-in '(16))))
#+END_SRC

Finally, we assign a =KeyBinding= to our function

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9> I")
                'ocf/clock-in-organization-task-as-default)
#+END_SRC

*** Personal Todo Sequence

The /LARGE/ sequence, with fast selection 

#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)

(setq org-todo-keywords     
      '((sequence "TODO(t)" "STARTED(s!)" "NEXT(n)" "FEEDBACK(f@/!)" "VERIFY(v)" "WAITING(w@/!)" 
                  "|" "DONE(d)" "DELEGATED(l@/!)" "CANCELLED(c@/!)")
	(sequence "TASK(f)" "|" "DONE(d)")
	(sequence "MAYBE(m)" "|" "CANCELLED(c)")))
#+END_SRC

and their faces... and triggers

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
	("MAYBE" . (:foreground "sea green"))
	("TASK" . (:foreground "blue"))
	("STARTED" :foreground "yellow" :weight bold)
	("NEXT" :foreground "blue" :weight bold)
	("FEEDBACK" :foreground "blue" :weight bold)
	("VERIFY" :foreground "magenta" :weight bold)
	("WAITING" :foreground "orange" :weight bold)
	("DONE" :foreground "forest green" :weight bold)
	("DELEGATED" :foreground "forest green" :weight bold)
	("CANCELLED" :foreground "forest green" :weight bold)))

(setq org-todo-state-tags-triggers
      '(("CANCELLED" ("CANCELLED" . t))
	("WAITING" ("WAITING" . t))
	("FEEDBACK" ("WAITING") ("FEEDBACK" . t))
	(done ("WAITING") ("FEEDBACK"))
	("TODO" ("WAITING") ("CANCELLED") ("FEEDBACK"))
	("NEXT" ("WAITING") ("CANCELLED") ("FEEDBACK"))
	("DONE" ("WAITING") ("CANCELLED") ("FEEDBACK"))))
#+END_SRC

*** Agenda files

The =path= to the org-files to be considered in the agenda

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("/home/oscar/Documents/Dropbox/Org")))
#+END_SRC

*** Agenda custom view

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("h" "Work todos" tags-todo
         "-personal-doat={.+}-dowith={.+}/!-TASK"
         ((org-agenda-todo-ignore-scheduled t)))
        ("H" "All work todos" tags-todo "-personal/!-TASK-MAYBE"
         ((org-agenda-todo-ignore-scheduled nil)))
        ("A" "Work todos with doat or dowith" tags-todo
         "-personal+doat={.+}|dowith={.+}/!-TASK"
         ((org-agenda-todo-ignore-scheduled nil)))
        ("j" "TODO dowith and TASK with"
         ((org-sec-with-view "TODO dowith")
          (org-sec-where-view "TODO doat")
          (org-sec-assigned-with-view "TASK with")
          (org-sec-stuck-with-view "STUCK with")))
        ("J" "Interactive TODO dowith and TASK with"
         ((org-sec-who-view "TODO dowith")))))
#+END_SRC

*** Refile

**** Default note file

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/git/org/refile.org")
#+END_SRC

**** Targets include this file and any file contributing to the agenda

up to 9 levels deep

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+END_SRC

**** Use full outline paths for refile targets 

We file directly with IDO and Targets complete directly with IDO

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

**** Allow refile to create parent tasks with confirmation

#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

**** Use IDO for both buffer and file completion and ido-everywhere to t

#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)
#+END_SRC

**** Exclude DONE state tasks from refile targets

#+BEGIN_SRC emacs-lisp
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

** Capture templates

Capture templates for: 
TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* TODO %?\n%U\n%a\n")
              ("r" "respond" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n")
              ("n" "note" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* %? :NOTE:\n%U\n%a\n")
              ("j" "Journal" entry (file+datetree "~/Documents/Dropbox/Org/diary.org")
               "* %?\n%U\n")
              ("w" "org-protocol" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* TODO Review %c\n%U\n" )
              ("m" "Meeting" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* MEETING with %? :MEETING:\n%U" )
              ("p" "Phone call" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* PHONE %? :PHONE:\n%U\n" )
              ("h" "Habit" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

** Properties for inline images 

We want the images to be load at startup
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images "inlineimages")
#+END_SRC

Set the image width to its original, unless there is a =width=
attribute assigned to it.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

Notice that one can set a fixed width by changing =nil= to ='(700)=
where the number indicated the width in pixels

The following displays images after executing a code
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook
	  'org-display-inline-images)
#+END_SRC

** Enable PDF and EPS files in org files

#+BEGIN_SRC emacs-lisp
;; Suggested on the org-mode maillist by Julian Burgos
(add-to-list 'image-file-name-extensions "pdf")
(add-to-list 'image-file-name-extensions "eps")

(add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")

(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
#+END_SRC
** =org-ref= and =ivy-bibtex=

The main codes are hosted at [[https://github.com/jkitchin/org-ref]] and
[[https://github.com/tmalsburg/helm-bibtex][https://github.com/tmalsburg/helm-bibtex]], were the configuration can
be found.

For =ivy-bibtex= I found this configuration on [[http://nasseralkmim.github.io/blog/2016/08/21/my-latex-environment/#org7788824][this post]]
#+BEGIN_SRC emacs-lisp
(require 'ivy-bibtex)

(setq bibtex-completion-bibliography "/home/oscar/Documents/LatexFiles/References.bib")
(setq bibtex-completion-library-path "/home/oscar/Documents/Bibliography/bibtex-pdfs/")

;; using bibtex path reference to pdf file
(setq bibtex-completion-pdf-field "File")

(setq ivy-bibtex-default-action 'bibtex-completion-insert-citation)
#+END_SRC

For =org-ref= I followed the simple configuration settings

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-c ["))

(setq org-ref-completion-library 'org-ref-ivy-cite)
(require 'org-ref)

(setq reftex-default-bibliography '("/home/oscar/Documents/LatexFiles/References.bib"))

(setq org-ref-bibliography-notes "/home/oscar/Documents/Dropbox/Org/RefNotes.org"
      org-ref-default-bibliography '("/home/oscar/Documents/LatexFiles/References.bib")
      org-ref-pdf-directory "/home/oscar/Documents/Bibliography/bibtex-pdfs/")

(setq bibtex-completion-bibliography "/home/oscar/Documents/LatexFiles/References.bib"
      bibtex-completion-library-path "/home/oscar/Documents/Bibliography/bibtex-pdfs/")
#+END_SRC

*** Opening the article's PDF

From the helm-bibtex search window, one of the actions is to open the
pdf. This relies on a link in the corresponding BiBTeX entry. When
exporting from Zotero, the files are listed in a file field (there is
no need to export both entries and files, since BetterBibTex will link
directly to the Zotero attached file). You must tell helm-bibtex which
field to look for. It will open all the specified files, by default in
Emacs itself, but you can change this to another viewer as shown:

#+BEGIN_SRC emacs-lisp
(setq  helm-bibtex-pdf-field "file")
(setq helm-bibtex-pdf-open-function
  (lambda (fpath)
    (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince" fpath)))
#+END_SRC

*** Requiring extra references 

**** arXiv

This library provides an org-mode link to [[http://arxiv.org][arXiv]] entries:
arxiv:cond-mat/0410285, and a function to get a bibtex entry and pdfs
for arxiv entries:

#+BEGIN_SRC emacs-lisp
(require 'org-ref-arxiv)
#+END_SRC

- =arxiv-add-bibtex-entry=
- =arxiv-get-pdf=: This command download the =PDF= for a given =arXiv=
  ID and open it within ~emacs~
- =arxiv-get-pdf-add-bibtex-entry=: This command download the =PDF=
  file from =arXiv=, saving it on the desired folder, and adds the
  bibtex entry.

**** ISBN

#+BEGIN_SRC emacs-lisp
(require 'org-ref-isbn)
#+END_SRC

This add the command

- =isbn-to-bibtex=: gets the bibtex entry for a given ISBN number

**** LaTeX

Make cites in LaTeX documents clickable, and with tooltips

#+BEGIN_SRC emacs-lisp
(require 'org-ref-latex)
#+END_SRC

*** Notes

With helm-bibtex one can link BibTeX entries to notes in an org-mode
file. I use a single =.org= file for all bibliographic notes, which can
be accessed as one of the actions (press TAB) from the helm-bibtex
search window. The file is specified in your =.emacs= with something
like

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-notes-path "/home/oscar/Documents/Dropbox/Org/RefNotes.org")
#+END_SRC

You can also access the notes from a previously-inserted citation like
you access the PDF (except you select a different action from the
search window). All comments above apply also to opening the notes.

From [[http://iflysib14.iflysib.unlp.edu.ar/tomas/en/blog/reference-management.html][this page]]

** Configuration of =org-reveal=

#+BEGIN_SRC emacs-lisp
(require 'ox-reveal)

(setq org-reveal-root "file:///home/oscar/Software/git.src/reveal.js")
#+END_SRC

** configure =org-gcal= and =calfw=

Both packages must be installed from MELPA: =calfw= and =org-gcal=

Change the dropbox path

More details at [[http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html]] and
[[https://github.com/myuhe/org-gcal.el]]

The last version was not working, but I found this [[http://cestlaz.github.io/posts/using-emacs-26-gcal/#.WKcbJbONHsI][post on the web]]
that might help

Requirements:
#+BEGIN_SRC emacs-lisp
(require 'alert)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq package-check-signature nil)

(require 'org-gcal) 

(setq org-gcal-client-id "358090972212-2s1v68nuce286597smbotq4ta4nd54ru.apps.googleusercontent.com"
	org-gcal-client-secret "y0IrGDvmspnDPvIMMI5puN4b"
	org-gcal-file-alist '(("o.castillo.felisola@gmail.com" .  "~/Documents/Dropbox/Org/gmail-agenda.org")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; (require 'calfw)
;; (require 'calfw-org)

;; (require 'org-gcal) 
;; (setq org-gcal-client-id "459480878076-s0md9sb6s3tq7irlhmmk7hjt7r391o6n.apps.googleusercontent.com" 
;;       org-gcal-client-secret "-SphSdn3WDrZJ1Z_JFTXEkcc" 
;;       org-gcal-file-alist '(("aetptsksd2rroqmq5ealbd9oec@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Personal
;; 			    ("ok0q79kgahqiu6mkp7uplamahk@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Research Ideas
;; 			    ("mfrmolv12h6sjdfbo8iobd1h1o@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Seminaries
;; 			    ("q6pkpsevenacdctgcj9dur1c8o@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Lecture prep.
;; 			    ("j10hh2p19p7j7qmh3bvvn32ilg@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Work meeting
;; 			    )
;;       )

;; (setq package-check-signature nil)

;; (setq org-gcal-client-id "471626867829-v6jolihkoha5oiinftb5d7kksvr4ev3e.apps.googleusercontent.com"
;;       org-gcal-client-secret "cFzd9lSj2R37Qr-Ln7P6o1Rm"
;;       org-gcal-file-alist '(("aetptsksd2rroqmq5ealbd9oec@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Personal
;; 			    ;; ("ok0q79kgahqiu6mkp7uplamahk@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Research Ideas
;; 			    ;; ("mfrmolv12h6sjdfbo8iobd1h1o@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Seminaries
;; 			    ;; ("q6pkpsevenacdctgcj9dur1c8o@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Lecture prep.
;; 			    ;; ("j10hh2p19p7j7qmh3bvvn32ilg@group.calendar.google.com" . "~/Documents/Dropbox/Org/gmail-agenda.org") ;; Work meeting
;; 			    ))
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; (require 'calfw) 
;; (require 'calfw-org)
;; (setq cfw:org-overwrite-default-keybinding t)
;; (require 'calfw-ical)

;; ;; (defun mycalendar ()
;; ;;   (interactive)
;; ;;   (cfw:open-calendar-buffer
;; ;;    :contents-sources
;; ;;    (list
;; ;;     ;; (cfw:org-create-source "Green")  ; orgmode source
;; ;;     (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/aetptsksd2rroqmq5ealbd9oec%40group.calendar.google.com/public/basic.ics" "IndianRed") ; Personal calender
;; ;;     (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/ok0q79kgahqiu6mkp7uplamahk%40group.calendar.google.com/public/basic.ics" "IndianRed") ; Research ideas
;; ;;     ))) 
;; (setq cfw:org-overwrite-default-keybinding t)

;; (require 'calfw-gcal)
#+END_SRC

** Open file applications

#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      (quote
       ((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . "evince %s"))))
#+END_SRC

** Publishing and exporting

This line allows to use the user =CUSTUM_ID= as labels when exported
to LaTeX

#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)

;; avoid getting \maketitle right after begin{document}
;; you should put \maketitle if and where you want it.
(setq org-latex-title-command "")
#+END_SRC

*** LaTeX export process

I want to add the packages +listings+, =minted=, =xcolor= and =tikz= to the LaTeX export

#+BEGIN_SRC emacs-lisp
(require 'ox)
(require 'ox-latex)
(setq org-latex-create-formula-image-program 'imagemagick)
;; (setq org-preview-latex-process-alist 'imagemagick)

(setq org-export-latex-listings t)
;; (setq org-latex-listings 'minted)
;; (add-to-list 'org-latex-packages-alist '("" "minted"))
(add-to-list 'org-latex-packages-alist '("" "xcolor"))
(add-to-list 'org-latex-packages-alist '("" "tikz" t))
(setq org-latex-listings-langs
      (quote ((emacs-lisp "Lisp")
              (lisp "Lisp")
              (clojure "Lisp")
              (c "C")
              (cc "C++")
              (fortran "fortran")
              (perl "Perl")
              (cperl "Perl")
              (python "Python")
              (ruby "Ruby")
              (html "HTML")
              (xml "XML")
              (tex "TeX")
              (latex "[LaTeX]TeX")
              (shell-script "bash")
              (gnuplot "Gnuplot")
              (ocaml "Caml")
              (caml "Caml")
              (sql "SQL")
              (sqlite "sql")
              (R-mode "R"))))
#+END_SRC

In order to preview =tikz= plots
#+begin_src emacs-lisp
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+end_src

And to use the =latexmk= process to generate the PDF files

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf -bibtex -f %f"))
#+END_SRC
add this after =%f"= :   "latexmk -c %f"

In order to see the rendered LaTeX equations scaled
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
#+END_SRC

*** Exporting classes

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)

(add-to-list 'org-latex-classes
	     '("book"
	       "\\documentclass{book}"
	       ("\\part{%s}" . "\\part*{%s}")
	       ("\\chapter{%s}" . "\\chapter*{%s}")
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
	     )

(add-to-list 'org-latex-classes
	     '("report"
	       "\\documentclass{report}"
	       ("\\part{%s}" . "\\part*{%s}")
	       ("\\chapter{%s}" . "\\chapter*{%s}")
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
	     )

(add-to-list 'org-latex-classes
	     '("ws-mpla"
	       "\\documentclass{ws-mpla}"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
	     )

;; (add-to-list 'org-latex-classes
;; 		 '("usm-thesis"
;; 		   "\\documentclass{usm-thesis}"
;; 		   ("\\part{%s}" . "\\part*{%s}")
;; 		   ("\\chapter{%s}" . "\\chapter*{%s}")
;; 		   ("\\section{%s}" . "\\section*{%s}")
;; 		   ("\\subsection{%s}" . "\\subsection*{%s}")
;; 		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
;; 		 )
;; )

(add-to-list 'org-latex-classes '("revtex4-1"
				  "\\documentclass{revtex4-1}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
				  ("\\section{%s}" . "\\section*{%s}")
				  ("\\subsection{%s}" . "\\subsection*{%s}")
				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
)

(add-to-list 'org-latex-classes '("elsarticle"
				  "\\documentclass{elsarticle}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
				  ("\\section{%s}" . "\\section*{%s}")
				  ("\\subsection{%s}" . "\\subsection*{%s}")
				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
)
#+END_SRC

*** =org-tree-slide=

#+BEGIN_SRC emacs-lisp
(require 'org-tree-slide)

(global-set-key (kbd "<f8>") 'org-tree-slide-mode)
(global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
#+END_SRC

*** Publishing projects

**** =org2web=

#+BEGIN_SRC emacs-lisp
(require 'org2web)

(org2web-add-project
 '("Doxdrum.github.io"
   :repository-directory "~/Software/git.src/Doxdrum.github.io"
   :remote (git "https://github.com/Doxdrum/Doxdrum.github.io.git" "master")
   ;; you can use `rclone` with `:remote (rclone "remote-name" "/remote/path/location")` instead.
   :site-domain "http://Doxdrum.github.io/"
   :site-main-title "Personal page"
   :site-sub-title "(Here it is!)"
   :theme (worg)
   :source-browse-url ("Github" "https://github.com/Doxdrum/Doxdrum.github.io")
   :personal-avatar ""
   :personal-duoshuo-shortname "Doxdrum-website"
   :web-server-port 7654))
#+END_SRC

**** Papers (OBSOLETE)

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '( ("paper"
          :base-directory "~/Documents/Dropbox/Org"
          :base-extension "org"
          :publishing-directory "~/Documents/Dropbox/Org/export"
          :publishing-function org-latex-publish-to-pdf)
         )
      )
#+END_SRC

** Meetings and =org-secretary=

[[http://orgmode.org/worg/org-tutorials/org-meeting-tasks.html][org-meeting-tasks]] and [[http://juanreyero.com/article/emacs/org-teams.html][org-secretary]]

#+BEGIN_SRC emacs-lisp
(define-key org-mode-map "\C-cn" 'org-mactions-new-numbered-action)

(defcustom org-mactions-numbered-action-format "TODO Action #%d "
  "Default structure of the headling of a new action.
    %d will become the number of the action."
  :group 'org-edit-structure
  :type 'string)

(defcustom org-mactions-change-id-on-copy t
  "Non-nil means make new IDs in copied actions.
If an action copied with the command `org-mactions-collect-todos-in-subtree'
contains an ID, that ID will be replaced with a new one."
  :group 'org-edit-structure
  :type 'string)

(defun org-mactions-new-numbered-action (&optional inline)
  "Insert a new numbered action, using `org-mactions-numbered-action-format'.
    With prefix argument, insert an inline task."
  (interactive "P")
  (let* ((num (let ((re "\\`#\\([0-9]+\\)\\'"))
                (1+ (apply 'max 0
                           (mapcar
                            (lambda (e)
                              (if (string-match re (car e))
                                  (string-to-number (match-string 1 (car e)))
                                0))
                            (org-get-buffer-tags))))))
         (tag (concat "#" (number-to-string num))))
    (if inline
        (org-inlinetask-insert-task)
      (org-insert-heading 'force))
    (unless (eql (char-before) ?\ ) (insert " "))
    (insert (format org-mactions-numbered-action-format num))
    (org-toggle-tag tag 'on)
    (if (= (point-max) (point-at-bol))
        (save-excursion (goto-char (point-at-eol)) (insert "\n")))
    (unless (eql (char-before) ?\ ) (insert " "))))

(defun org-mactions-collect-todos-in-subtree ()
  "Collect all TODO items in the current subtree into a flat list."
  (interactive)
  (let ((buf (get-buffer-create "Org TODO Collect"))
        (cnt 0) beg end string s)
    (with-current-buffer buf (erase-buffer) (org-mode))
    (org-map-entries
     (lambda ()
       (setq beg (point) end (org-end-of-subtree t t) cnt (1+ cnt)
             string (buffer-substring beg end)
             s 0)
       (when org-mactions-change-id-on-copy
         (while (string-match "^\\([ \t]*:ID:\\)[ \t\n]+\\([^ \t\n]+\\)[ \t]*$"
                              string s)
           (setq s (match-end 1)
                 string (replace-match (concat "\\1 "
                                               (save-match-data (org-id-new)))
                                       t nil string))))
       (with-current-buffer buf (org-paste-subtree 1 string)
                            (goto-char (point-max))))
     (format "TODO={%s}" (regexp-opt org-not-done-keywords))
     'tree)
    (if (= cnt 0)
        (message "No TODO items in subtree")
      (message "%d TODO entries copied to kill ring" cnt)
      (prog1 (with-current-buffer buf
               (kill-new (buffer-string)))
        (kill-buffer buf)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'org-secretary)
(setq org-tags-exclude-from-inheritance '("prj")
      org-stuck-projects '("+prj/-MAYBE-DONE"
			   ("TODO" "TASK") ()))

(setq org-sec-me "OCF")
#+END_SRC

** Setting =org-pdfview=

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org '(require 'org-pdfview))
#+END_SRC


If you want, you can also configure the org-mode default open PDF file function.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
#+END_SRC

* Activating =PDF-tools=

#+BEGIN_SRC emacs-lisp
(pdf-tools-install)
#+END_SRC

Revert buffer after it has changed
[[https://github.com/politza/pdf-tools/issues/25][From the github page]]

#+BEGIN_SRC emacs-lisp
;; (setq auto-revert-interval 0.5)
;; (auto-revert-set-timer)
#+END_SRC

A few tricks found in [[http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/][pracmaticemacs]]

** Shortcuts

#+BEGIN_SRC emacs-lisp
(define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
(define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
(define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
#+END_SRC

** Automatically annotate highlights

#+BEGIN_SRC emacs-lisp
(setq pdf-annot-activate-created-annotations t)
#+END_SRC

** Fine-grained zooming

#+BEGIN_SRC emacs-lisp
(setq pdf-view-resize-factor 1.1)
#+END_SRC

* =Google=

** Search on =google= and =scholar-google=

#+BEGIN_SRC emacs-lisp
(defun prelude-google ()
  "Googles a region, if any, or prompts for a Google search string."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))
; (global-set-key (kbd "C-x C-g") 'prelude-google)
(global-set-key (kbd "M-g M-g") 'prelude-google)
;; (global-set-key (kbd "M-g g")   'prelude-google)

(defun google-scholar ()
  "Googles a region, if any, or prompts for a Google search string."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/scholar?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google Scholar: ")))))

(global-set-key (kbd "M-g M-s") 'google-scholar)
;; (global-set-key (kbd "M-g s")   'google-scholar)

#+END_SRC

** =Google-contacts=

From [[https://julien.danjou.info/projects/emacs-packages#google-contacts][Julien's webpage]]

#+BEGIN_SRC emacs-lisp
;; (require 'google-contacts)
;; (require 'google-contacts-gnus)
;; (require 'google-contacts-message) ; for message-mode (not yet installed)
#+END_SRC

After you run =M-x google-contacts= the first time, this lines are
added to your =init= file. I move them here.

#+BEGIN_SRC emacs-lisp
;; (auth-source-save-behavior nil)
;; (send-mail-function (quote smtpmail-send-it))
#+END_SRC

* Settings for =sage-shell-mode=

See the [[https://github.com/stakemori/sage-shell-mode][github web-page]] for details

** Path to the executable file

#+BEGIN_SRC emacs-lisp
(setq sage-shell:sage-executable "/usr/bin/sage")
#+END_SRC

** Define aliases

Run SageMath by =M-x run-sage= instead of =M-x sage-shell:run-sage=

#+BEGIN_SRC emacs-lisp
(sage-shell:define-alias)
;; Turn on eldoc-mode
(add-hook 'sage-shell-mode-hook #'eldoc-mode)
(add-hook 'sage-shell:sage-mode-hook #'eldoc-mode)

(setq sage-shell:use-prompt-toolkit t)
#+END_SRC

** Completion mode for Sage

#+BEGIN_SRC emacs-lisp
(setq sage-shell:completion-function 'pcomplete)
#+END_SRC

** Configuration of =ob-sagemath=

The default configuration found in
[[https://github.com/stakemori/ob-sagemath][the git page]]

#+BEGIN_SRC emacs-lisp
(require 'ob-sagemath)
;; Ob-sagemath supports only evaluating with a session.
(setq org-babel-default-header-args:sage '((:session . t)
                                           (:results . "output")))

;; C-c s for asynchronous evaluating (only for SageMath code blocks).
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "C-c s") 'ob-sagemath-execute-async))

;; Do not confirm before evaluation
(setq org-confirm-babel-evaluate nil)

;; Do not evaluate code blocks when exporting.
(setq org-export-babel-evaluate nil)

;; Show images when opening a file.
(setq org-startup-with-inline-images t)

;; Show images after evaluating code blocks.
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

** Configuration =helm-sage=

From [[https://github.com/stakemori/helm-sage][the git page]].

#+BEGIN_SRC emacs-lisp
(eval-after-load "sage-shell-mode"
  '(sage-shell:define-keys sage-shell-mode-map
     "C-c C-i"  'helm-sage-complete
     "C-c C-h"  'helm-sage-describe-object-at-point
     "M-r"      'helm-sage-command-history
     "C-c o"    'helm-sage-output-history))
#+END_SRC

** History

#+BEGIN_SRC emacs-lisp
(setq sage-shell:input-history-cache-file "~/.emacs.d/.sage_shell_input_history")
#+END_SRC

** Inline display of LaTeX and plots

#+BEGIN_SRC emacs-lisp
(add-hook 'sage-shell-after-prompt-hook #'sage-shell-view-mode)
#+END_SRC

* Settings of =sage-mode=

** Default configuration

#+BEGIN_SRC emacs-lisp
;; ;; Start .emacs


;; ;; After installation of the spkg, you must add something like the
;; ;; following to your .emacs:

;; (add-to-list 'load-path "/home/oscar/Software/sage/local/share/emacs/site-lisp/sage-mode")
;; (require 'sage "sage")
;; (setq sage-command "/home/oscar/Software/sage/sage")

;; ;; If you want sage-view to typeset all your output and display plot()
;; ;; commands inline, uncomment the following line and configure sage-view:
;; ;; (add-hook 'sage-startup-after-prompt-hook 'sage-view)
;; ;; In particular customize the variables `sage-view-default-commands'
;; ;; and `sage-view-inline-plots-method'.
;; ;; Using sage-view to typeset output requires a working LaTeX
;; ;; installation with the preview package.

;; ;; Also consider running (customize-group 'sage) to see more options.

;; ;; End .emacs

#+END_SRC

* Setting =imaxima= and =imath=

See the [[https://sites.google.com/site/imaximaimath/][webpage]]

#+BEGIN_SRC emacs-lisp
(push "/usr/local/share/emacs/site-lisp" load-path)
(autoload 'imaxima "imaxima" "Maxima frontend" t)
(autoload 'imath "imath" "Interactive Math mode" t)
(autoload 'imath-mode "imath" "Interactive Math mode" t)
#+END_SRC

* Setting =paradox=

#+BEGIN_SRC emacs-lisp
(setq paradox-github-token "8311678a7da07f0b250436cfcce5db58015a657a")
(setq paradox-automatically-star t)
#+END_SRC

* Configuration of =paperless=

[[https://github.com/atgreen/paperless][Github page!]]

#+BEGIN_SRC emacs-lisp
(setq paperless-capture-directory "/home/oscar/Documents/SCANS/")
(setq paperless-root-directory "/home/oscar/Documents/Dropbox/")
#+END_SRC

* Spotify

#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "s-<down>") #'spotify-playpause)
;; (global-set-key (kbd "s-<right>") #'spotify-next)

(spotify-enable-song-notifications)
#+END_SRC
with the package =helm-spotify-plus=
#+BEGIN_SRC emacs-lisp
(require 'helm-spotify-plus)
#+END_SRC

The recommended key binding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-s s") 'helm-spotify-plus)  ;; s for SEARCH
(global-set-key (kbd "M-s f") 'helm-spotify-plus-next)
(global-set-key (kbd "M-s b") 'helm-spotify-plus-previous)
(global-set-key (kbd "M-s p") 'helm-spotify-plus-play) 
(global-set-key (kbd "M-s g") 'helm-spotify-plus-pause) 
;; g cause you know.. C-g stop things :)
#+END_SRC

