#+TITLE: Emacs configuration

* Melpa repository

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+END_SRC
  
* GUI

** Do not show splash screen, scroll bar nor tool bar
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+end_src

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Highlight current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful
when pairing or presenting code.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

** Set default font and size configuration

#+begin_src emacs-lisp
(setq hrs/default-font "Inconsolata")
(setq hrs/default-font-size 14)
(setq hrs/current-font-size hrs/default-font-size)

(setq hrs/font-change-increment 1.1)

(defun hrs/set-font-size ()
  "Set the font to `hrs/default-font' at `hrs/current-font-size'."
  (set-frame-font
   (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

(defun hrs/reset-font-size ()
  "Change font size back to `hrs/default-font-size'."
  (interactive)
  (setq hrs/current-font-size hrs/default-font-size)
  (hrs/set-font-size))

(defun hrs/increase-font-size ()
  "Increase current font size by a factor of `hrs/font-change-increment'."
  (interactive)
  (setq hrs/current-font-size
	(ceiling (* hrs/current-font-size hrs/font-change-increment)))
  (hrs/set-font-size))

(defun hrs/decrease-font-size ()
  "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq hrs/current-font-size
	(max 1
	     (floor (/ hrs/current-font-size hrs/font-change-increment))))
  (hrs/set-font-size))

(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
(define-key global-map (kbd "C--") 'hrs/decrease-font-size)

(hrs/reset-font-size)
#+end_src

** Custom theme

#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Oscar Castillo-Felisola"
        user-mail-address "o.castillo.felisola@gmail.com"
        calendar-latitude -33.66
        calendar-longitude -71.51
        calendar-location-name "Valparaiso, CHILE")
#+END_SRC

* Functionality

** Save backups on a folder

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "/home/oscar/mydotfiles/emacs.d/backups")))
#+END_SRC

** Sellects the dictionary

#+begin_src emacs-lisp
(ispell-change-dictionary "british" t)
#+end_src

** Turns the orthographic correction (in Flyspell mode) on 

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

** Open shell

#+begin_src emacs-lisp
(define-key global-map (kbd "<f10>") 'shell)
#+end_src

** Obligates the Enter (or RET) key to indent if necessary

#+begin_src emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
(setq-default indent-tabs-mode t)
#+end_src

** Highlight text selection, bracket match, and expression within

#+begin_src emacs-lisp
(transient-mark-mode 1)
(show-paren-mode 1)
(setq show-paren-style 'expression)
#+end_src

** Wrap lines at the edges of windows

#+begin_src emacs-lisp
(setq-default truncate-lines nil)
;; Even for org-mode
;; (setq org-startup-truncated nil)
#+end_src

** Completion

#+begin_src emacs-lisp
(define-key global-map "\C-x\t" 'pcomplete)
#+end_src

** Open files vertically

From [[http://stackoverflow.com/a/6697992/1777293]]

#+BEGIN_SRC emacs-lisp
(defun 2-windows-vertical-to-horizontal ()
  (let ((buffers (mapcar 'window-buffer (window-list))))
    (when (= 2 (length buffers))
      (delete-other-windows)
      (set-window-buffer (split-window-horizontally) (cadr buffers)))))

(add-hook 'emacs-startup-hook '2-windows-vertical-to-horizontal)
#+END_SRC
* Programming Languages 

** Python

Indent 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq python-indent 2)
#+END_SRC


** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC


** LaTeX

*** New environments

#+BEGIN_SRC emacs-lisp
(setq latex-block-names '("theorem" "corollary" "proof"
                          "frame" "block" "alertblock"
                          "definition" "example" "align"
                          "align*" "columns" "tikzpicture"
                          "axis" "cases" "matrix" "pmatrix"
                          "vmatrix" "parts" "questions"
                          "solution" "Ebox" "WEbox" "widetext"
                          "dmath" "dmath*" "split"))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Org-mode configuration

** Settings

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/home/oscar/mydotfiles/emacs.d/org-mode/lisp/")
;; (add-to-list 'load-path "/home/oscar/mydotfiles/emacs.d/org-mode/contrib/lisp/" )
#+END_SRC

*** The /alist/ for =org= and =txt= files

 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
 #+END_SRC

*** Key bindings

 #+BEGIN_SRC emacs-lisp
 (global-set-key "\C-cl" 'org-store-link) 
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cb" 'org-iswitchb)
 (global-set-key "\C-cc" 'org-capture)
 #+END_SRC

*** Indentation

 #+BEGIN_SRC emacs-lisp
 (setq org-indirect-buffer-display 'current-window)
 (setq org-startup-indented t)
 (setq org-src-preserve-indentation nil)
 (setq org-edit-src-content-indentation 0)
 #+END_SRC

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode 1)))

  (setq org-hide-leading-stars t)
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** babel languages

Active Babel languages:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages 
  '((R . t) 
    (emacs-lisp . t) 
    (latex . t)
    (python . t)
    (shell . t)
    (gnuplot . t)
    (maxima . t)
    (ledger . t)
    (org . t)
    (octave . t)
))
#+END_SRC

** Task management 

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'note)
#+END_SRC

Store my org files in =~/Documents/Dropbox/Org=, 
+maintain an inbox in Dropbox+, 
+define the location of an index file+ (+my main todo list+)
Screencast [[http://2484.de/org-index.html]], 
and archive finished tasks in =~/Documents/Dropdox/Org/archive.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "/home/oscar/Documents/Dropbox/Org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  ;; (setq org-inbox-file "/home/oscar/Documents/Dropbox/inbox.org")
  ;; (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

*** Personal Todo Sequence

The /LARGE/ sequence, with fast selection 

#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)

(setq org-todo-keywords     
      '((sequence "TODO(t)" "STARTED(s!)" "NEXT(n)" "FEEDBACK(f@/!)" "VERIFY(v)" "WAITING(w@/!)" 
                  "|" "DONE(d)" "DELEGATED(l@/!)" "CANCELLED(c@/!)")))
#+END_SRC

and their faces... and triggers

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("STARTED" :foreground "yellow" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("FEEDBACK" :foreground "blue" :weight bold)
              ("VERIFY" :foreground "magenta" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("DELEGATED" :foreground "forest green" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold))))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("FEEDBACK" ("WAITING") ("FEEDBACK" . t))
              (done ("WAITING") ("FEEDBACK"))
              ("TODO" ("WAITING") ("CANCELLED") ("FEEDBACK"))
              ("NEXT" ("WAITING") ("CANCELLED") ("FEEDBACK"))
              ("DONE" ("WAITING") ("CANCELLED") ("FEEDBACK")))))
#+END_SRC

*** Agenda files

The =path= to the org-files to be considered in the agenda

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("/home/oscar/Documents/Dropbox/Org")))
#+END_SRC

*** Refile

**** Default note file

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/git/org/refile.org")
#+END_SRC

**** Targets include this file and any file contributing to the agenda

up to 9 levels deep

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+END_SRC

**** Use full outline paths for refile targets 

We file directly with IDO and Targets complete directly with IDO

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

**** Allow refile to create parent tasks with confirmation

#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

**** Use IDO for both buffer and file completion and ido-everywhere to t

#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)
#+END_SRC

**** Exclude DONE state tasks from refile targets

#+BEGIN_SRC emacs-lisp
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

** Capture templates

Capture templates for: 
TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* TODO %?\n%U\n%a\n")
              ("r" "respond" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n")
              ("n" "note" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* %? :NOTE:\n%U\n%a\n")
              ("j" "Journal" entry (file+datetree "~/Documents/Dropbox/Org/diary.org")
               "* %?\n%U\n")
              ("w" "org-protocol" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* TODO Review %c\n%U\n" )
              ("m" "Meeting" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* MEETING with %? :MEETING:\n%U" )
              ("p" "Phone call" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* PHONE %? :PHONE:\n%U" )
              ("h" "Habit" entry (file "~/Documents/Dropbox/Org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

** New =org-structure-templates=

#+BEGIN_SRC emacs-lisp
(eval-after-load "org"
  '(add-to-list 'org-structure-template-alist
                '("E" "\\begin\{equation\}\n?\n\\end\{equation\}" "")))
(eval-after-load "org"
  '(add-to-list 'org-structure-template-alist
                '("j" "\\begin\{split\}\n?\n\\end\{split\}" "")))
(eval-after-load "org"
  '(add-to-list 'org-structure-template-alist
                '("C" "#+BEGIN_COMMENT\n?\n#+END_COMMENT" "")))
(eval-after-load "org"
  '(add-to-list 'org-structure-template-alist   
                '("G" "\\begin\{align\}\n?\n\\end\{align\}" "")))  
#+END_SRC

** Citing 

#+BEGIN_SRC emacs-lisp
;; (eval-after-load 'org (require 'ox-bibtex))
;; (require 'ox-bibtex) ;; This is working
#+END_SRC

** LaTeX export process

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf -bibtex %f"))
#+END_SRC

** Properties for inline images 

Set the image width to its original, unless there is a =width=
attribute assigned to it.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

Notice that one can set a fixed width by changing =nil= to ='(700)=
where the number indicated the width in pixels

** =org-ref=

The main code is hosted at [[https://github.com/jkitchin/org-ref]]

I followed the simple configuration settings

#+BEGIN_SRC emacs-lisp
(require 'org-ref)

(setq reftex-default-bibliography '("/home/oscar/Documents/LatexFiles/References.bib"))

(setq org-ref-bibliography-notes"/home/oscar/Documents/Dropbox/Org/RefNotes.org"
      org-ref-default-bibliography '("/home/oscar/Documents/LatexFiles/References.bib")
      org-ref-pdf-directory "/home/oscar/Bibliography/bibtex-pdf/")

(setq bibtex-completion-bibliography "/home/oscar/Documents/LatexFiles/References.bib")
#+END_SRC

*** Opening the article's PDF

From the helm-bibtex search window, one of the actions is to open the pdf. This relies on a link in the corresponding BiBTeX entry. When exporting from Zotero, the files are listed in a file field (there is no need to export both entries and files, since BetterBibTex will link directly to the Zotero attached file). You must tell helm-bibtex which field to look for. It will open all the specified files, by default in Emacs itself, but you can change this to another viewer as shown:

#+BEGIN_SRC emacs-lisp
(setq  helm-bibtex-pdf-field "file")
(setq helm-bibtex-pdf-open-function
  (lambda (fpath)
    (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince" fpath)))
#+END_SRC

*** Requiring extra references 

**** arXiv

This library provides an org-mode link to [[http://arxiv.org][arXiv]] entries:
arxiv:cond-mat/0410285, and a function to get a bibtex entry and pdfs
for arxiv entries:

#+BEGIN_SRC emacs-lisp
(require 'org-ref-arxiv)
#+END_SRC

- =arxiv-add-bibtex-entry=
- =arxiv-get-pdf=

**** ISBN

#+BEGIN_SRC emacs-lisp
(require 'org-ref-isbn)
#+END_SRC

*** Notes

With helm-bibtex one can link BibTeX entries to notes in an org-mode file. I use a single .org file for all bibliographic notes, which can be accessed as one of the actions (press TAB) from the helm-bibtex search window. The file is specified in your .emacs with something like

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-notes-path "/home/oscar/Documents/Dropbox/Org/RefNotes.org")
#+END_SRC

You can also access the notes from a previously-inserted citation like you access the PDF (except you select a different action from the search window). All comments above apply also to opening the notes. 

From [[http://iflysib14.iflysib.unlp.edu.ar/tomas/en/blog/reference-management.html][this page]]

** Open file applications

#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      (quote
       ((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . "evince %s"))))
#+END_SRC
* Settings for =sage-shell-mode=

See the [[https://github.com/stakemori/sage-shell-mode][github web-page]] for details

** Path to the executable file

#+BEGIN_SRC emacs-lisp
(setq sage-shell:sage-executable "/home/oscar/Software/sage/sage")
#+END_SRC

** Run SageMath by =M-x run-sage= instead of =M-x sage-shell:run-sage=

#+BEGIN_SRC emacs-lisp
(sage-shell:define-alias)
;; Turn on eldoc-mode
(add-hook 'sage-shell-mode-hook #'eldoc-mode)
(add-hook 'sage-shell:sage-mode-hook #'eldoc-mode)
#+END_SRC

* Settings of =sage-mode=

** Default configuration

#+BEGIN_SRC emacs-lisp
;; ;; Start .emacs


;; ;; After installation of the spkg, you must add something like the
;; ;; following to your .emacs:

;; (add-to-list 'load-path "/home/oscar/Software/sage/local/share/emacs/site-lisp/sage-mode")
;; (require 'sage "sage")
;; (setq sage-command "/home/oscar/Software/sage/sage")

;; ;; If you want sage-view to typeset all your output and display plot()
;; ;; commands inline, uncomment the following line and configure sage-view:
;; ;; (add-hook 'sage-startup-after-prompt-hook 'sage-view)
;; ;; In particular customize the variables `sage-view-default-commands'
;; ;; and `sage-view-inline-plots-method'.
;; ;; Using sage-view to typeset output requires a working LaTeX
;; ;; installation with the preview package.

;; ;; Also consider running (customize-group 'sage) to see more options.

;; ;; End .emacs

#+END_SRC

