#+latex_class: revtex4-1

#+title: GDH rules for gravitons
#+author: Oscar Castillo-Felisola, Ivan Schmidt, Alfonso R. Zerwekh
#+email: o.castillo.felisola@gmail.com, ivan.schmidt@usm.cl, alfonso.zerwekh@usm.cl
#+options: toc:nil email:t

#+BEGIN_EXPORT latex
\maketitle
#+END_EXPORT

* Compton scattering

The aim of this section is to reproduce the results of the Compton
scattering using the helicity formalism. We follow the procedure in
Ref. cite:holstein06_gravit_physic.


\begin{align*}
  k_{i}   & = (k,0,0,k), \\
  p_{i}   & = (m,0,0,0), \\
  k_{f}   & = (k_{f},k_{f} \sin(\theta),0,k_{f} \cos(\theta)), \\
  p_{f}   & = (q,-k_{f} \sin(\theta),0,k-k_{f} \cos(\theta)), \\
  \epsilon_{ip}  & = (0,-1/\sqrt{2},- \imath /\sqrt{2},0), \\ 
  \epsilon_{im}  & = (0,1/\sqrt{2},- \imath /\sqrt{2},0), \\ 
  \epsilon_{ipc} & = (0,-1/\sqrt{2}, \imath /\sqrt{2},0), \\ 
  \epsilon_{imc} & = (0,1/\sqrt{2}, \imath /\sqrt{2},0), \\ 
  \epsilon_{fp}  & = (0,-\cos(\theta)/\sqrt{2}, - \imath /\sqrt{2}, \sin(\theta)/\sqrt{2}), \\ 
  \epsilon_{fpc} & = (0,-\cos(\theta)/\sqrt{2},  \imath /\sqrt{2}, \sin(\theta)/\sqrt{2}), \\ 
  \epsilon_{fmc} & = (0,\cos(\theta)/\sqrt{2},  \imath /\sqrt{2}, -\sin(\theta)/\sqrt{2}), \\ 
  \epsilon_{fm}  & = (0,\cos(\theta)/\sqrt{2}, - \imath /\sqrt{2}, -\sin(\theta)/\sqrt{2})
\end{align*}

** COMMENT Maxima Code 
#+BEGIN_SRC maxima :session compton :exports none :results raw
load(dirac2)$
assume(m>0,s>0,s>m^2,k>0)$
set_display(xml);
comp_def(
    k_i(k,0,0,k),
    p_i(m,0,0,0),
    k_f(kf,kf*sin(θ),0,kf*cos(θ)),
    p_f(q,-kf*sin(θ),0,k-kf*cos(θ)),
    ε_ip(0,-1/sqrt(2),-%i/sqrt(2),0),
    ε_im(0,1/sqrt(2),-%i/sqrt(2),0),
    ε_ipc(0,-1/sqrt(2),%i/sqrt(2),0),
    ε_imc(0,1/sqrt(2),%i/sqrt(2),0),
    ε_fp(0,-cos(θ)/sqrt(2), -%i/sqrt(2), sin(θ)/sqrt(2)),
    ε_fpc(0,-cos(θ)/sqrt(2), %i/sqrt(2), sin(θ)/sqrt(2)),
    ε_fmc(0,cos(θ)/sqrt(2), %i/sqrt(2), -sin(θ)/sqrt(2)),
    ε_fm(0,cos(θ)/sqrt(2), -%i/sqrt(2), -sin(θ)/sqrt(2))
);
εi[1]:ε_ip$
εi[2]:ε_im$
εf[1]:ε_fp$
εf[2]:ε_fm$
εfc[1]:ε_fpc$
εfc[2]:ε_fmc$
εic[1]:ε_ipc$
εic[2]:ε_imc$

a: noncov(D(εi[1],p_f))$
print(a);
#+END_SRC

#+RESULTS:
                                  dirac2.mac
                             simplifying-new.lisp
                                 dgtrace2.mac
                                  dgcon2.mac
                                  dgeval2.mac
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$Sig|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$Sigb|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$Gam|
                                dgmatrix2.mac 
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for $LAM
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$t|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for $F
                                   qcd1.mac
              scalarL = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for $K_I
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for $P_I
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for $K_F
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for $P_F
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_IP|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_IM|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_IPC|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_IMC|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_FP|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_FPC|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_FMC|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$ε_FM|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$εI|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$εF|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$εFC|
ARRSTORE: use_fast_arrays=false; allocate a new property hash table for |$εIC|
-(kf*sin(θ))/sqrt(2) 

* Conclusions


bibliographystyle:unsrt
bibliography:References.bib
